from Katna.video import Video
from Katna.writer import Writer
import os
import csv
import ntpath


# PrintDataWriter will print the data generated by Katn alibrary
class TimeStampDiskWriter(Writer):
    def __init__(self, location, file_ext=".csv"):
        self.output_dir_path = location
        self.file_ext = file_ext
        self._create_dir(location)

    def generate_output_filename(self, filepath):
        file_name_arr = []
        input_file_name = self._generate_filename_from_filepath(filepath)
        file_name_arr.append(input_file_name)
        filename = "_".join(file_name_arr)
        return filename

    def save_timestamp_data_to_disk(self, timestamps, file_name):
        file_full_path = os.path.join(self.output_dir_path, file_name + self.file_ext)
        with open(file_full_path, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['Index', 'Timestamp'])
            for i, timestamp in enumerate(timestamps):
                writer.writerow([i, timestamp])

    def write(self, filepath, data):
        output_filename = self.generate_output_filename(filepath)
        self.save_timestamp_data_to_disk(data, file_name=output_filename)

# class KeyFrameDiskWriter(Writer):
#     """Writes the keyframe data to the disk

#     :param BaseWriter: [description]
#     :type BaseWriter: [type]
#     """
#     def __init__(self, location, file_ext=".jpeg"):
#         """Initalizes the file extension of the output file and location of output directory.

#         :param location: [description]
#         :type location: [type]
#         :param file_ext: [description], defaults to ""
#         :type file_ext: str, optional
#         """
#         self.output_dir_path = location
#         self.file_ext = file_ext
#         self._create_dir(location)

#     def generate_output_filename(self, filepath, keyframe_number):
#         """Generates the filename of output data file.

#         :param filepath: path of the file
#         :type filepath: str
#         :param keyframe_number: keyframe number
#         :type keyframe_number: int
#         :return: name of the output file 
#         :rtype: str
#         """

#         file_name_arr = []
#         input_file_name = self._generate_filename_from_filepath(filepath)

#         # append the input filename
#         file_name_arr.append(input_file_name)

#         # append the keyframe number
#         file_name_arr.append(str(keyframe_number))
        
#         # join the name using _ 
#         filename = "_".join(file_name_arr)
        
#         return filename

#     def save_frame_data_to_disk(self, frame, file_name):
#         """Saves the keyframe data to the disk at ouutput directory path set at
#         initialization.

#         :param frame: frame data to be written
#         :type frame: np.array
#         :param file_name: Name of the file
#         :type file_name: str
#         """

#         file_full_path = os.path.join(self.output_dir_path, file_name + self.file_ext)
#         cv2.imwrite(file_full_path, frame)

#     def write(self, filepath, data):
#         """Write the data generated by Katna library for file @ filepath on to the disk.

#         :param filepath: path of the input file processed by Katna
#         :type filepath: str
#         :param data: data generated using Katna library
#         :type data: list
#         """

#         for counter, img in enumerate(data):
#             output_filename = self.generate_output_filename(filepath, keyframe_number=counter)
#             self.save_frame_data_to_disk(img, file_name=output_filename)
